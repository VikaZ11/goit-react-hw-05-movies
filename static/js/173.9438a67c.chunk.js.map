{"version":3,"file":"static/js/173.9438a67c.chunk.js","mappings":"uUAIaA,EAAY,kCAGzBC,EAAAA,EAAAA,SAAAA,QALc,gCAMdA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QANc,mCAOdC,SALW,SAQN,IAAMC,EAAiB,mCAAG,6GAENH,EAAAA,EAAAA,IAAA,sBAFM,cAEvBI,EAFuB,yBAGtBA,EAASC,KAAKC,SAHQ,gCAK7BC,QAAQC,IAAI,KAAMC,SALW,yDAAH,qDASjBC,EAAe,mCAAG,WAAMC,GAAN,uFACNX,EAAAA,EAAAA,IAAA,6BAAgCW,IAD1B,cACvBP,EADuB,yBAEtBA,EAASC,KAAKC,SAFQ,2CAAH,sDAKfM,EAAY,mCAAG,WAAMC,GAAN,uFACHb,EAAAA,EAAAA,IAAA,gBAAmBa,IADhB,cACpBT,EADoB,yBAEnBA,EAASC,MAFU,2CAAH,sDAKZS,EAAY,mCAAG,WAAMD,GAAN,uFACHb,EAAAA,EAAAA,IAAA,gBAAmBa,EAAnB,aADG,cACpBT,EADoB,yBAEnBA,EAASC,KAAKU,MAFK,2CAAH,sDAKZC,EAAc,mCAAG,WAAMH,GAAN,uFACLb,EAAAA,EAAAA,IAAA,gBAAmBa,EAAnB,aADK,cACtBT,EADsB,yBAErBA,EAASC,KAAKC,SAFO,2CAAH,qD,oJChCrBW,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,sRAiBHE,EAAW,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,SAC7B,OACE,UAACL,EAAD,CAAYI,GAAIA,EAAhB,WACE,SAAC,MAAD,CAAaE,KAAK,OACjBD,IAGN,E,SC3BYE,EAAMN,EAAAA,GAAAA,IAAH,uFAMHO,EAAUP,EAAAA,GAAAA,IAAH,0CCiDpB,EAjDqB,WAAO,IAAD,IACjBQ,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAY,qBADDC,EAAAA,EAAAA,MACaC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,UAM7C,IAJAC,EAAAA,EAAAA,YAAU,YACRvB,EAAAA,EAAAA,IAAac,GAASU,KAAKN,EAC5B,GAAE,CAACJ,KAECG,EACH,OAAO,KAGT,IAAQQ,EACNR,EADMQ,MAAOC,EACbT,EADaS,YAAaC,EAC1BV,EAD0BU,SAAUC,EACpCX,EADoCW,OAAQC,EAC5CZ,EAD4CY,aAAcC,EAC1Db,EAD0Da,aAG5D,OACE,iCACE,SAACtB,EAAD,CAAUC,GAAIU,EAAd,sBACA,UAACN,EAAD,YACE,SAACD,EAAD,CAAKmB,IAAG,UAAK5C,EAAAA,IAAL,OAAiBuC,GAAeM,IAAG,UAAKP,MAChD,4BACE,0BACGA,EADH,KACYK,EAAaG,UAAU,EAAG,GADtC,QAGA,wCAAgBC,KAAKC,MAAqB,GAAfN,GAA3B,QACA,sCACA,uBAAIF,KACJ,oCACA,uBAAIC,EAAOQ,KAAI,SAAAC,GAAK,OAAIA,EAAMC,KAAO,GAAjB,aAGxB,oDACA,2BACE,yBACE,SAAC,KAAD,CAAS7B,GAAE,OAAX,qBAEF,yBACE,SAAC,KAAD,CAASA,GAAE,UAAX,2BAGJ,SAAC,EAAA8B,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,QAIP,C","sources":["api.js","components/BackLink.jsx","page/MovieDetails.styled.js","page/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = `https://api.themoviedb.org/3/`;\nconst API_KEY = 'f39ff6961706954b4bce0deacf0d5670';\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w200';\nconst lang = 'en-US';\n\naxios.defaults.baseURL = BASE_URL;\naxios.defaults.params = {\n  api_key: API_KEY,\n  language: lang,\n};\n\nexport const getTrendingMovies = async () => {\n  try {\n    const response = await axios.get(`trending/movie/day`);\n    return response.data.results;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const getSearchMovies = async query => {\n  const response = await axios.get(`search/movie?query=${query}`);\n  return response.data.results;\n};\n\nexport const getMovieById = async id => {\n  const response = await axios.get(`movie/${id}`);\n  return response.data;\n};\n\nexport const getMovieCast = async id => {\n  const response = await axios.get(`movie/${id}/credits`);\n  return response.data.cast;\n};\n\nexport const getMovieReview = async id => {\n  const response = await axios.get(`movie/${id}/reviews`);\n  return response.data.results;\n}","import { Link } from 'react-router-dom';\nimport { HiArrowLeft } from 'react-icons/hi';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst StyledLink = styled(Link)`\n  display: inline-flex;\n  align-items: center;\n  gap: 4px;\n  color: black;\n  padding: 8px 16px;\n  border-radius: 4px;\n  text-decoration: none;\n  color: green;\n  font-weight: 500;\n  border: 1px solid green;\n\n  :hover {\n    color: black;\n  }\n`;\n\nexport const BackLink = ({ to, children }) => {\n  return (\n    <StyledLink to={to}>\n      <HiArrowLeft size=\"16\" />\n      {children}\n    </StyledLink>\n  );\n};\n\nBackLink.propTypes = {\n   to: PropTypes.object.isRequired, \n}\n","import styled from 'styled-components';\n\nexport const Img = styled.img`\n  display: block;\n  margin-top: 16px;\n  margin-right: 16px;\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n`;\n","import { useParams, useLocation, NavLink, Outlet } from 'react-router-dom';\nimport { Suspense } from 'react';\nimport { useEffect, useState } from 'react';\nimport { BackLink } from '../components/BackLink';\nimport { getMovieById } from 'api';\nimport { IMAGE_URL } from 'api';\nimport { Img, Wrapper } from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/movies';\n\n  useEffect(() => {\n    getMovieById(movieId).then(setMovie);\n  }, [movieId]);\n\n  if (!movie) {\n    return null;\n  }\n\n  const { title, poster_path, overview, genres, vote_average, release_date } =\n    movie;\n\n  return (\n    <>\n      <BackLink to={backLinkHref}>Go back</BackLink>\n      <Wrapper>\n        <Img src={`${IMAGE_URL}${poster_path}`} alt={`${title}`} />\n        <div>\n          <h2>\n            {title} ({release_date.substring(0, 4)})\n          </h2>\n          <p>User Score: {Math.round(vote_average * 10)}%</p>\n          <h3>Overview</h3>\n          <p>{overview}</p>\n          <h3>Genres</h3>\n          <p>{genres.map(genre => genre.name + ' ')}</p>\n        </div>\n      </Wrapper>\n      <p>Additional information:</p>\n      <ul>\n        <li>\n          <NavLink to={`cast`}>Cast</NavLink>\n        </li>\n        <li>\n          <NavLink to={`reviews`}>Reviews</NavLink>\n        </li>\n      </ul>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["IMAGE_URL","axios","api_key","language","getTrendingMovies","response","data","results","console","log","message","getSearchMovies","query","getMovieById","id","getMovieCast","cast","getMovieReview","StyledLink","styled","Link","BackLink","to","children","size","Img","Wrapper","movieId","useParams","useState","movie","setMovie","backLinkHref","useLocation","state","from","useEffect","then","title","poster_path","overview","genres","vote_average","release_date","src","alt","substring","Math","round","map","genre","name","Suspense","fallback"],"sourceRoot":""}